from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from callbacks.menu import MenuCallback
from callbacks.analysis import AnalysisCallback
from states.analysis import AnalysisFSM
from keyboards.client import get_analysis_type_keyboard, get_back_to_menu_keyboard, get_main_menu_keyboard
from services.youtube_service import extract_video_id, get_video_comments, save_comments_to_file, get_comments_file_path
from services.ai_service import analyze_comments_with_prompt
from services.pdf_generator import generate_pdf
from database.crud import get_user, update_user_analyses, create_video, get_prompts, create_ai_response
from utils.texts import ENTER_VIDEO_URL, INVALID_URL, LIMIT_EXCEEDED, ANALYSIS_STARTED, ANALYSIS_DONE
from utils.progress import ProgressTracker
import os
import asyncio
from datetime import datetime
from pathlib import Path

router = Router()

user_analysis_locks = {}

@router.callback_query(MenuCallback.filter(F.action == "analysis_my_video"))
async def analysis_my_video_handler(query: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisFSM.choose_type)
    await state.update_data(analysis_category="my")
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_analysis_type_keyboard("my"))

@router.callback_query(MenuCallback.filter(F.action == "analysis_competitor"))
async def analysis_competitor_handler(query: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisFSM.choose_type)
    await state.update_data(analysis_category="competitor")
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_analysis_type_keyboard("competitor"))

@router.callback_query(AnalysisFSM.choose_type, AnalysisCallback.filter(F.type == "simple"))
async def choose_simple_analysis(query: CallbackQuery, callback_data: AnalysisCallback, state: FSMContext):
    await state.update_data(analysis_type="simple")
    await query.message.edit_text(ENTER_VIDEO_URL, reply_markup=get_back_to_menu_keyboard())
    await state.set_state(AnalysisFSM.waiting_for_url)

@router.callback_query(AnalysisFSM.choose_type, AnalysisCallback.filter(F.type == "advanced"))
async def choose_advanced_analysis(query: CallbackQuery, callback_data: AnalysisCallback, state: FSMContext):
    await state.update_data(analysis_type="advanced")
    await query.message.edit_text(ENTER_VIDEO_URL, reply_markup=get_back_to_menu_keyboard())
    await state.set_state(AnalysisFSM.waiting_for_url)

@router.callback_query(AnalysisFSM.choose_type, MenuCallback.filter(F.action == "main_menu"))
async def back_from_analysis_type(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())
    await state.clear()


async def update_progress_message(message: Message, text: str, emoji: str = "‚è≥"):
    try:
        progress_bar = f"{emoji} {text}"
        await message.edit_text(progress_bar)
    except Exception:
        await message.answer(f"{emoji} {text}")


async def run_analysis_task(user_id: int, message: Message, url: str, category: str, analysis_type: str):
    comments_file = None
    pdf_file = None
    progress_msg = None
    
    try:
        user = await get_user(user_id)
        
        if user.analyses_used >= user.analyses_limit:
            await message.answer(LIMIT_EXCEEDED, reply_markup=get_back_to_menu_keyboard())
            return
        
        progress_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å YouTube...")
        
        video_id = extract_video_id(url)
        comments_data = get_video_comments(video_id)
        comments_file = get_comments_file_path(video_id)
        save_comments_to_file(comments_data, comments_file)
        
        await update_progress_message(
            progress_msg, 
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\nüîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."
        )
        
        db_video_id = await create_video(
            user.id, 
            url, 
            f"Comments: {comments_file}"
        )
        
        with open(comments_file, "r", encoding="utf-8") as f:
            comments_text = f.read()
        
        if analysis_type == "simple":
            await update_progress_message(
                progress_msg,
                "ü§ñ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ AI...\n‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥"
            )
            
            simple_prompts = await get_prompts(category=category, analysis_type="simple")
            if not simple_prompts:
                raise ValueError("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            prompt_text = simple_prompts[0].prompt_text
            ai_response = await analyze_comments_with_prompt(comments_text, prompt_text)
            
            await create_ai_response(
                user.id, 
                db_video_id, 
                0, 
                "simple", 
                ai_response
            )
            
            final_ai_response = ai_response
        
        elif analysis_type == "advanced":
            advanced_prompts = await get_prompts(category=category, analysis_type="advanced")
            if not advanced_prompts:
                raise ValueError("–ù–µ—Ç advanced –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –±–∞–∑–µ")
            
            total_steps = len(advanced_prompts) + 1
            
            await update_progress_message(
                progress_msg,
                f"ü§ñ –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({total_steps} —ç—Ç–∞–ø–æ–≤)...\n‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã"
            )
            
            partial_responses = []
            
            tasks = []
            for idx, prompt in enumerate(advanced_prompts):
                task = analyze_comments_with_prompt(comments_text, prompt.prompt_text)
                tasks.append((idx, task))
            
            results = await asyncio.gather(*[t[1] for t in tasks])
            
            for idx, partial_response in enumerate(results):
                partial_responses.append(partial_response)
                await create_ai_response(
                    user.id, 
                    db_video_id, 
                    idx + 1,
                    "advanced_partial", 
                    partial_response
                )
                
                completed = idx + 1
                percentage = int((completed / total_steps) * 100)
                progress_bar = "‚ñì" * (percentage // 10) + "‚ñë" * (10 - percentage // 10)
                
                await update_progress_message(
                    progress_msg,
                    f"üîç –≠—Ç–∞–ø {completed}/{total_steps}\n{progress_bar} {percentage}%"
                )
            
            await update_progress_message(
                progress_msg,
                f"üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑...\n{progress_bar} 90%"
            )
            
            synthesis_prompts = await get_prompts(category=category, analysis_type="synthesis")
            if not synthesis_prompts:
                raise ValueError("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω synthesis –ø—Ä–æ–º–ø—Ç")
            
            synthesis_prompt_text = synthesis_prompts[0].prompt_text
            combined_partials = "\n\n".join(
                [f"–ß–ê–°–¢–ò–ß–ù–´–ô –û–¢–í–ï–¢ {i+1}:\n{resp}" for i, resp in enumerate(partial_responses)]
            )
            
            final_ai_response = await analyze_comments_with_prompt(
                combined_partials,
                synthesis_prompt_text
            )
            
            await create_ai_response(
                user.id, 
                db_video_id, 
                0,
                "advanced", 
                final_ai_response
            )
        
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞")
        
        await update_progress_message(
            progress_msg,
            "üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞..."
        )
        
        pdf_file = generate_pdf(final_ai_response, url, video_id)
        
        reports_dir = Path(f"reports/{user.user_id}")
        reports_dir.mkdir(parents=True, exist_ok=True)
        saved_pdf_path = reports_dir / f"{video_id}_{analysis_type}.pdf"
        os.rename(pdf_file, str(saved_pdf_path))
        pdf_file = str(saved_pdf_path)
        
        await update_progress_message(
            progress_msg,
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        )
        
        await message.answer_document(
            FSInputFile(pdf_file),
            caption=f"üìä <b>–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!</b>\n\n"
                    f"üìπ –í–∏–¥–µ–æ: <code>{video_id}</code>\n"
                    f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments_data)}\n"
                    f"üéØ –¢–∏–ø: {'–ü—Ä–æ—Å—Ç–æ–π' if analysis_type == 'simple' else '–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π'}\n\n",
            parse_mode="HTML",
        )

        await message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:",
            reply_markup=get_main_menu_keyboard()
        )
        
        # await update_user_analyses(user.id, user.analyses_used + 1)
        
    except ValueError as e:
        if progress_msg:
            await update_progress_message(progress_msg, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await message.answer(
            f"‚ùå {str(e)}\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    except FileNotFoundError as e:
        if progress_msg:
            await update_progress_message(progress_msg, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer(
            f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}",
            reply_markup=get_main_menu_keyboard()
        )
    except OSError as e:
        if progress_msg:
            await update_progress_message(progress_msg, "‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        await message.answer(
            f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        if progress_msg:
            await update_progress_message(progress_msg, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        import traceback
        print(traceback.format_exc())


@router.message(AnalysisFSM.waiting_for_url)
async def process_video_url(message: Message, state: FSMContext):
    url = message.text.strip()
    user_id = message.from_user.id

    if user_id in user_analysis_locks and not user_analysis_locks[user_id].done():
        await message.answer(
            "‚è≥ –£ –≤–∞—Å —É–∂–µ –∏–¥–µ—Ç –∞–Ω–∞–ª–∏–∑. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:",
            reply_markup=get_main_menu_keyboard()
        )
        return
    

    data = await state.get_data()
    category = data.get('analysis_category')
    analysis_type = data.get('analysis_type')
    
    if not category or not analysis_type:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    
    await state.clear()
    
    # Asinxron task yaratish
    task = asyncio.create_task(
        run_analysis_task(user_id, message, url, category, analysis_type)
    )
    user_analysis_locks[user_id] = task
    
    def cleanup(t):
        if user_id in user_analysis_locks:
            del user_analysis_locks[user_id]
    
    task.add_done_callback(cleanup)